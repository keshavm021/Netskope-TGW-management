---
    AWSTemplateFormatVersion: 2010-09-09
    Description: "IPsec Management Lambda 1.0"
    Metadata:
      AWS::CloudFormation::Interface:
        ParameterLabels:
          TGWRegion:
            default: Transit Gateway region
          TGWID:
            default: Transit Gateway identifier
          TGWName: 
            default: Transit Gateway Name
          TGWAttachmentID1:
            default: First (Primary) Transit Gateway VPN attachment 
          TGWAttachmentID2:
            default: Second (Failover) Transit Gateway VPN attachment
          TransitGatewayArn:
            default: The ARN of the existing Transit Gateway
          Fallback:
            default: Is fallback required?
    
    Parameters:
      TGWRegion:
        Default: "us-east-1"
        AllowedValues:
          - "us-east-1"
          - "us-east-2"
          - "us-west-1"
          - "us-west-2"
        Description: 'The AWS region where your TGW deployed'
        Type: String
      TGWID:
        Default: "tgw-03ccb3279c26a1e63"
        Description: 'TGW ID. For example, tgw-01234567890123456'
        Type: String
      TGWName:
        Default: "transit-gateway-01"
        Description: 'TGW name that will be used for access control. All your TGW attachments must have an attribute {"Key"="TGWName", "Value"="This parameter"}. For example, {"Key"="TGWName", "MyProdTGW-us-east-1"}'
        Type: String
      TGWAttachmentID1:
        Default: 'tgw-attach-0477b366859648ade'
        Description: 'TGW attachment ID for the first (primary) VPN. For example, tgw-attach-01234567890123456'
        Type: String
      TGWAttachmentID2:
        Default: 'tgw-attach-0f7ccc12ebe92c676'
        Description: 'TGW attachment ID for the second (failover) VPN. For example, tgw-attach-01234567890123456'
        Type: String
      TransitGatewayArn:
        Default: 'arn:aws:ec2:us-east-1:208764385157:transit-gateway/tgw-03ccb3279c26a1e63'
        Type: String
        Description: The ARN of the existing Transit Gateway.
      Fallback:
        Default: 'yes'
        Description: 'Yes/No parameter for the route fallback support to the TGWAttachmentID1 if both of its IPsec tunnels became active after the failure.'
        AllowedValues:
          - 'yes'
          - 'no'
        Type: 'String'
    Conditions: 
      FailbackSupported: !Equals
          - !Ref Fallback
          - 'yes'
    Mappings:
          SourceCode:
              General:
                  S3Bucket: 'yd-source-us-east-1' #S3 bucket in the same region as Transit Gateway
                  S3Prefix: "IPsecManagement" #Folder in which the lambda zip file is present 
    
    Resources:
      DynamoDBLockTable:
        Type: AWS::DynamoDB::Table
        Properties: 
          Tags: 
              - Key: Type
                Value: IPSecAutomationToNetskope
          AttributeDefinitions: 
            - 
              AttributeName: "lock_key"
              AttributeType: "S"
            - 
              AttributeName: "sort_key"
              AttributeType: "S"
          KeySchema: 
            - 
              AttributeName: "lock_key"
              KeyType: "HASH"
            - 
              AttributeName: "sort_key"
              KeyType: "RANGE"
          BillingMode: 'PAY_PER_REQUEST'
          TimeToLiveSpecification: 
              AttributeName: 'expiry_time'
              Enabled: True

      GlobalNetwork:
        Type: "AWS::NetworkManager::GlobalNetwork"
        Properties: 
          Description: "My Global Network"
          Tags: 
              - Key: Type
                Value: IPSecAutomationToNetskope

  # Register the existing Transit Gateway with the Global Network
      TransitGatewayRegistration:
        Type: "AWS::NetworkManager::TransitGatewayRegistration"
        Properties:
          GlobalNetworkId: !Ref GlobalNetwork
          TransitGatewayArn: !Ref TransitGatewayArn
          
      IPsecManagementLambdaExecutionRole:
          DependsOn: DynamoDBLockTable
          Type: 'AWS::IAM::Role'
          Properties:
            Tags: 
              - Key: Type
                Value: IPSecAutomationToNetskope
            AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Path: '/'
            Policies:
                - PolicyName: IPsecManagementEC2ActionsPolicy
                  PolicyDocument:
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'ec2:SearchTransitGatewayRoutes'
                          - 'ec2:ReplaceTransitGatewayRoute'
                        Resource:
                          - 'arn:aws:ec2:*:*:transit-gateway-route-table/*'
                          - 'arn:aws:ec2:*:*:transit-gateway-attachment/*'
                        Condition:
                          StringEquals:
                            'ec2:ResourceTag/TGWName': !Ref TGWName
                      - Effect: Allow
                        Action:
                          - 'ec2:DescribeTransitGatewayRouteTables'
                          - 'ec2:DescribeVpnConnections'
                          - 'ec2:DescribeTransitGatewayAttachments'
                        Resource:
                          - '*'
                - PolicyName: IPsecManagementDynamoDBActionsPolicy
                  PolicyDocument:
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'dynamodb:PutItem'
                          - 'dynamodb:GetItem'
                          - 'dynamodb:DeleteItem'
                          - 'dynamodb:UpdateItem'
                        Resource:
                          - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBLockTable}'
                          - 'arn:aws:ec2:*:*:transit-gateway-attachment/*'
                - PolicyName: LogsAccess
                  PolicyDocument:
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'logs:CreateLogGroup'
                        Resource:
                          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
                      - Effect: Allow
                        Action:
                          - 'logs:CreateLogStream'
                          - 'logs:PutLogEvents'
                        Resource:
                          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
      IPsecManagementLambda:
          Type: 'AWS::Lambda::Function'
          DependsOn: IPsecManagementLambdaExecutionRole
          Properties:
            Description: >-
              This lambda function triggered when IPsec VPN to Netskope Security Cloud status changes and updates static routes in the TGW route tables.
            Handler: 'lambda_function.lambda_handler'
            Role: !GetAtt IPsecManagementLambdaExecutionRole.Arn
            Code:
              S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
              S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "S3Prefix"], 'IPsecManagementLambda.zip']]
            Environment:
              Variables:
                TGWID: !Ref TGWID
                TGWRegion: !Ref TGWRegion
                TGWAttachmentID1: !Ref TGWAttachmentID1
                TGWAttachmentID2: !Ref TGWAttachmentID2
                DynamoDBLockTable: !Ref DynamoDBLockTable
                FallbackSupport: !Ref Fallback
                LOGLEVEL: 'INFO'
            Runtime: python3.8
            MemorySize: 128
            Timeout: 300
            Tags: 
              - Key: Type
                Value: IPSecAutomationToNetskope
      EventRule: 
        Type: AWS::Events::Rule
        DependsOn: IPsecManagementLambda
        Properties: 
          Description: "Event Rule for IPsecManagement Lambda function updating static routes to Netskope"
          EventPattern: 
            source: 
              - "aws.networkmanager"
            detail-type: 
              - "Network Manager Status Update"
            detail: 
              transitGatewayArn: 
                - !Sub "arn:aws:ec2:${TGWRegion}:${AWS::AccountId}:transit-gateway/${TGWID}"
          State: "ENABLED"
          Targets: 
            - 
              Arn: 
                Fn::GetAtt: 
                  - "IPsecManagementLambda"
                  - "Arn"
              Id: "IPsecManagementLambda"
      PermissionForEventsToInvokeLambda: 
        Type: AWS::Lambda::Permission
        Properties: 
          FunctionName: 
            Ref: "IPsecManagementLambda"
          Action: "lambda:InvokeFunction"
          Principal: "events.amazonaws.com"
          SourceArn: 
            Fn::GetAtt: 
              - "EventRule"
              - "Arn"
      EventRuleScheduled: 
        Type: AWS::Events::Rule
        Condition: FailbackSupported
        DependsOn: IPsecManagementLambda
        Properties: 
          Description: "Scheduled event Rule for IPsecManagement Lambda function updating static routes to Netskope"
          ScheduleExpression: "rate(10 minutes)"
          State: "ENABLED"
          Targets: 
            - 
              Arn: 
                Fn::GetAtt: 
                  - "IPsecManagementLambda"
                  - "Arn"
              Id: "IPsecManagementLambda"
              Input: !Sub '{"detail": {"changeType": "VPN-CONNECTION-IPSEC-HEALTHCHECK","transitGatewayArn": "arn:aws:ec2:${TGWRegion}:${AWS::AccountId}:transit-gateway/${TGWID}"}}'
    
      PermissionForEventsToInvokeScheduledLambda: 
        Type: AWS::Lambda::Permission
        Condition: FailbackSupported
        Properties: 
          FunctionName: 
            Ref: "IPsecManagementLambda"
          Action: "lambda:InvokeFunction"
          Principal: "events.amazonaws.com"
          SourceArn: 
            Fn::GetAtt: 
              - "EventRuleScheduled"
              - "Arn"
    
    Outputs:
      DynamoDBLockTable:
        Description: DynamoDB Lock Table
        Value: !GetAtt DynamoDBLockTable.Arn
      IPsecManagementLambdaExecutionRole:
        Description: Lambda Execution Role
        Value: !GetAtt IPsecManagementLambdaExecutionRole.Arn
      IPsecManagementLambda:
        Description: Lambda Execution Role
        Value: !GetAtt IPsecManagementLambda.Arn
